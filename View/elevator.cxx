// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "elevator.h"
#include <iostream>

using namespace std;

View::View(int numfloors, int numlifts, vector<int> liftpass, vector<int> liftstartfloor, vector<int> liftstartdir, vector<int> floorpass, vector<vector<bool> > liftbut, vector<vector<bool> > floorbut) {
    NUMLIFTS = numlifts;
    NUMFLOORS = numfloors;
    for(int i = 0; i < NUMLIFTS; i++) {
        Lift l(liftstartfloor[i], liftpass[i], liftstartdir[i], liftbut[i]);
        lifts.push_back(l);
    }
    for(int i = 0; i < NUMFLOORS; i++) {
        Floor f(floorpass[i], floorbut[i]);
        floors.push_back(f);
    }
    make_window();
    Fl::run();
}

void View::loadFile(Fl_Widget* obj, void*) {
    //This is where i will pass stuff to controller
    cout << "Load file triggered\n";
}

void View::startSim(Fl_Widget* obj, void*) {
    //This is where i will pass stuff to controller
    cout << "Start Simulator triggered\n";
}

void View::stopSim(Fl_Widget* obj, void*) {
    //This is where i will pass stuff to controller
    cout << "Stop Simulator triggered\n";
}

void View::stepFor(Fl_Widget* obj, void*) {
    //This is where i will pass stuff to controller
    cout << "Step Forward triggered\n";
}

void View::stepBack(Fl_Widget* obj, void*) {
    //This is where i will pass stuff to controller
    cout << "Step Back triggered\n";
}

//FLTK WINDOW
Fl_Window* View::make_window() {
    Fl_Window* w;
    { Fl_Window* o = new Fl_Window(350 + View::NUMLIFTS * 140, 704, "Lift");
        w = o;
        o->color((Fl_Color)55);
        
        //SLIDERS
        int x = 345;
        for(int i = 0; i < View::NUMLIFTS; i++) {
            { Fl_Value_Slider* o = new Fl_Value_Slider(x, 75, 20, 525, "Lift");
                View::sliders[i] = o;
                switch(View::lifts[i].getDir()) {
                    case(-1):
                        View::sliders[i]->color(FL_CYAN);
                        break;
                    case(1):
                        View::sliders[i]->color((Fl_Color)213);
                        break;
                    default:
                        break;
                }
                View::sliders[i]->minimum(View::NUMFLOORS);
                View::sliders[i]->maximum(0);
                View::sliders[i]->step(1);
                View::sliders[i]->value(View::lifts[i].getCurFLoor());
                View::sliders[i]->slider_size(0.1);
                View::sliders[i]->align(Fl_Align(33));
                o->deactivate();
            } // Fl_Value_Slider* sliders[]
            x+= 125;
        }
        
        //INFORMATION BOX
        { Fl_Box* o = new Fl_Box(145, 100, 150, 510, "Floor Information");
            o->box(FL_EMBOSSED_BOX);
            o->color((Fl_Color)55);
            o->align(Fl_Align(FL_ALIGN_TOP));
        } // Fl_Box* o
        
        //PASSENGERS PER FLOOR
        int y = 112;
        for(int i = 0; i < View::NUMFLOORS; i++) {
            {   View::passengersPerFloor[i] = new Fl_Value_Output(185, y, 25, 25, "Floor");
                View::passengersPerFloor[i]->labelsize(12);
                View::passengersPerFloor[i]->textsize(12);
                View::passengersPerFloor[i]->value(View::floors[i].getNumPass());
            } // Fl_Value_Output* passengersPerFloor[]
            y+= 50;
        }
        
        //UP BUTTONS
        y = 155;
        for(int i = View::NUMFLOORS - 2; i >= 0; i--) {
            {   View::upButtons[i] = new Fl_Round_Button(215, y, 60, 25, "Up");
                View::upButtons[i]->down_box(FL_ROUND_DOWN_BOX);
                View::upButtons[i]->value(View::floors[i].getButtons()[0]);
                View::upButtons[i]->labelsize(12);
                View::upButtons[i]->deactivate();
            } // Fl_Round_Button* upButtons[]
            y += 50;
        }
        
        //DOWN BUTTONS
        y = 120;
        for(int i = View::NUMFLOORS - 1; i >= 1 ; i--) {
            {   View::downButtons[i - 1] = new Fl_Round_Button(215, y, 60, 25, "Down");
                View::downButtons[i - 1]->down_box(FL_ROUND_DOWN_BOX);
                View::downButtons[i - 1]->value(View::floors[i].getButtons()[1]);
                View::downButtons[i - 1]->labelsize(12);
                View::downButtons[i - 1]->deactivate();
            } // Fl_Round_Button* downButtons[]
            y+= 50;
        }
        
        //FLOOR BUTTONS
        vector<char*> names;
        x = 370;
        for(int i = 0; i < View::NUMLIFTS; i++) {
            y = 150;
            
            //PROBLEM: Don't know how to fix, need to create an array of the char*'s
            for(int j = 0; j < View::NUMFLOORS; j++) {
                int k = j+1;
                char* name = (char*)malloc(sizeof(char));
                sprintf(name, "%d", k);
                names.push_back(name);
                //cout << "name: " << names[j] << "\n";
                {   View::floorButtons[i*j] = new Fl_Round_Button(x, y, 35, 15, names[j]);
                    View::floorButtons[i*j]->down_box(FL_ROUND_DOWN_BOX);
                    View::floorButtons[i*j]->value(View::lifts[i].getButtons()[j]);
                    View::floorButtons[i*j]->deactivate();
                } // Fl_Round_Button* floorButtons[]
                y+= 20;
            }
            x+= 125;
        }
        
        //PASSENGERS PER LIFT
        x = 435;
        for(int i = 0; i < View::NUMLIFTS; i++) {
            { Fl_Value_Output* o = new Fl_Value_Output(x, 100, 33, 24, "Passengers");
                View::passengersPerLift[i] = o;
                View::passengersPerLift[i]->labelsize(12);
                View::passengersPerLift[i]->value(View::lifts[i].getNumPass());
            } // Fl_Value_Output* passengersPerLift[]
            x += 125;
        }
        { Fl_Button* o = new Fl_Button(25, 25, 63, 20, "Load File");
            o->callback((Fl_Callback*)loadFile);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(25, 125, 110, 20, "Start Simulation");
            o->callback((Fl_Callback*)startSim);
        } // Fl_Button* o
        { Fl_Button* o =new Fl_Button(25, 225, 110, 20, "Stop Simulation");
            o->callback((Fl_Callback*)stopSim);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(25, 325, 100, 20, "Step Forward");
            o->callback((Fl_Callback*)stepFor);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(25, 425, 110, 20, "Step Backward");
            o->callback((Fl_Callback*)stepBack);
        } // Fl_Button* o
        
        o->end();
    } // Fl_Window* o
    w->show();
    return w;
}

Floor :: Floor(int passengers, vector<bool> btns) {
    numPassengers = passengers;
    buttons = btns;
}

int Floor :: getNumPass() {
    return numPassengers;
}

vector<bool> Floor :: getButtons() {
    return buttons;
}

void Floor :: setNumPass(int passengers) {
    numPassengers = passengers;
}

void Floor :: setButtons(vector<bool> btns) {
    buttons = btns;
}

Lift :: Lift(int floor, int passengers, int dir, vector<bool> btns) {
    currentFloor = floor;
    numPassengers = passengers;
    direction = dir;
    buttons = btns;
}

int Lift :: getCurFLoor() {
    return currentFloor;
}
int Lift :: getNumPass() {
    return numPassengers;
}

int Lift :: getDir() {
    return  direction;
}

vector<bool> Lift :: getButtons() {
    return buttons;
}

void Lift :: setCurFloor(int floor) {
    currentFloor = floor;
}

void Lift :: setNumPass(int passengers) {
    numPassengers = passengers;
}

void Lift :: setDir(int dir) {
    direction = dir;
}

void Lift :: setButtons(vector<bool> btns) {
    buttons = btns;
}
